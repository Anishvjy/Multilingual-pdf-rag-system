# -*- coding: utf-8 -*-
"""retrieval.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1G0kp6CS4cIflWnu-1Ercd-KpJortkLa9
"""

def initialize_bm25(chunks):
    # Tokenize chunks for BM25
    tokenized_chunks = [chunk.split() for chunk in chunks]
    return BM25Okapi(tokenized_chunks)

def get_top_k_chunks(query, chunks, bm25, k=5):
    # Semantic search with FAISS
    query_embedding = embedding_model.encode([query])
    distances, indices = index.search(np.array(query_embedding).reshape(1, -1), k)

    if len(indices[0]) == 0:
        print("No results found in FAISS index.")
        semantic_chunks = []
    else:
        semantic_chunks = [chunks[i] for i in indices[0] if i < len(chunks)]  # Handle index out of bounds

    # Keyword search with BM25
    bm25_scores = bm25.get_scores(query.split())
    bm25_ranking = np.argsort(bm25_scores)[-k:][::-1]
    bm25_chunks = [chunks[i] for i in bm25_ranking]

    # Combine and deduplicate chunks
    combined_chunks = list(set(semantic_chunks + bm25_chunks))[:k]
    return combined_chunks